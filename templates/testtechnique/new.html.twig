{% extends 'base2.html.twig' %}

{% block title %}New Testtechnique{% endblock %}

{% block css %}
  {{ parent() }}
 
  
{% endblock %}

{% block sideBar %}
  {{ parent() }}
{% endblock %}

{% block headside %}
  {{ parent() }}
{% endblock %}
{% block breadcrumb %}
    {{ parent() }}
{% endblock %}

{% block body %}
  <div class="pc-container">
    <div class="pc-content">
      <div class="row">
        <div class="col-12">
          <div class="card">
            <div class="card-header">
              <h5>Créer un test technique {% if interview is defined %}pour l'interview {{ interview.titreoffre }}{% endif %}</h5>
            </div>
            <div class="card-body">
              {{ include('testtechnique/_form.html.twig') }}

             <a href="{{ path('app_testtechnique_by_interview', {'idinterview': interview.idinterview}) }}" class="btn btn-light mt-3">
    <i class="ti ti-arrow-left"></i> Retour aux tests de l'interview
</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block javascript %}
  {{ parent() }}
  <script>
document.addEventListener('DOMContentLoaded', function() {
    const descriptionField = document.querySelector('#{{ form.descriptiontesttechnique.vars.id }}');
    const checkGrammarBtn = document.getElementById('check-grammar-btn');
    const correctionContainer = document.getElementById('grammar-correction');
    let lastCheckTime = 0;
    let currentCorrection = '';

    window.applyCorrection = function() {
        if (currentCorrection) {
            descriptionField.value = currentCorrection;
            showAlert('success', 'Corrections appliquées');
        }
    };

    window.dismissCorrection = function() {
        correctionContainer.innerHTML = '';
    };

    checkGrammarBtn.addEventListener('click', function() {
        const now = Date.now();
        if (now - lastCheckTime < 5000) {
            showAlert('warning', 'Veuillez attendre 5 secondes entre chaque vérification');
            return;
        }
        lastCheckTime = now;

        const text = descriptionField.value.trim();
        if (!text) {
            showAlert('info', 'Veuillez saisir du texte à vérifier');
            return;
        }

        showLoading();
        checkGrammarBtn.disabled = true;

        fetch('{{ path('app_testtechnique_new_for_interview', {'idinterview': testtechnique.idinterview.idinterview}) }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams({ text: text })
        })
        .then(handleResponse)
        .then(data => processGrammarResponse(data, text))
        .catch(handleError)
        .finally(() => {
            checkGrammarBtn.disabled = false;
        });
    });

    function showAlert(type, message, icon = '') {
        const icons = {
            'success': 'check-circle',
            'warning': 'exclamation-triangle',
            'info': 'info-circle',
            'danger': 'exclamation-circle'
        };
        
        icon = icon || icons[type] || '';
        const iconHtml = icon ? `<i class="fas fa-${icon} me-2"></i>` : '';
        
        correctionContainer.innerHTML = `
            <div class="alert alert-${type}">
                ${iconHtml}${message}
            </div>
        `;
    }

    function showLoading() {
        correctionContainer.innerHTML = `
            <div class="alert alert-info">
                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                Vérification en cours...
            </div>
        `;
    }

    function handleResponse(response) {
        if (!response.ok) throw new Error(`Erreur HTTP: ${response.status}`);
        return response.json();
    }

function processGrammarResponse(data, originalText) {
    if (data.error) {
        showAlert('danger', data.error);
        return;
    }

    currentCorrection = data.errors.correction || originalText;
    
    // Construction du HTML pour les erreurs
    let errorsHtml = '';
    if (data.errors.details && data.errors.details.length) {
        errorsHtml = data.errors.details.map(error => `
            <li class="mb-2">
                <div class="fw-bold">${error.message}</div>
                ${error.context ? `<div class="text-muted small">Contexte: ${error.context}</div>` : ''}
                ${error.replacements?.length ? `
                    <div class="mt-1">
                        <span class="small">Suggestions:</span>
                        ${error.replacements.map(r => `<span class="badge bg-success ms-1">${r}</span>`).join('')}
                    </div>
                ` : ''}
            </li>
        `).join('');
    } else if (data.errors.error) {
        // Fallback si pas de détails mais message d'erreur
        errorsHtml = `
            <li>
                <div class="fw-bold">Suggestions de correction :</div>
                <div class="mt-2">${data.errors.error.replace(/\n/g, '<br>')}</div>
            </li>
        `;
    }

    if (errorsHtml) {
        correctionContainer.innerHTML = `
            <div class="alert alert-warning">
                <div class="d-flex align-items-center">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <h5 class="mb-0">${data.errors.details?.length || 1} suggestion(s) de correction</h5>
                </div>
                <ul class="mt-3 mb-1 ps-3">${errorsHtml}</ul>
                <div class="d-flex gap-2 mt-3">
                    <button type="button" class="btn btn-sm btn-success" onclick="applyCorrection()">
                        <i class="fas fa-check me-1"></i> Appliquer les corrections
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="dismissCorrection()">
                        <i class="fas fa-times me-1"></i> Ignorer
                    </button>
                </div>
            </div>
        `;
    } else {
        showAlert('success', 'Aucune erreur détectée dans le texte');
    }
}
    function handleError(error) {
        console.error('Erreur:', error);
        showAlert('danger', `Erreur: ${error.message}`);
    }

    function getErrorContext(text, offset, length) {
        const start = Math.max(0, offset - 20);
        const end = Math.min(text.length, offset + length + 20);
        let context = text.substring(start, end);
        
        if (start > 0) context = '...' + context;
        if (end < text.length) context = context + '...';
        
        const errorStart = offset - start;
        const errorEnd = errorStart + length;
        const before = context.substring(0, errorStart);
        const error = context.substring(errorStart, errorEnd);
        const after = context.substring(errorEnd);
        
        return `${before}<strong class="text-danger">${error}</strong>${after}`;
    }
});

</script>

{% endblock %}


